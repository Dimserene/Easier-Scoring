[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Patch 1 is for implementing xChips in function card_eval_status_text()

[[patches]]
[patches.regex]
target = "functions/common_events.lua"
pattern = '''
(?<indent>[\s ])*elseif eval_type \=\= 'chips' then 
[\s ]*sound \= 'chips1'
[\s ]*amt \= amt
[\s ]*colour \= G\.C\.CHIPS
[\s ]*text \= localize\{type\='variable',key\='a_chips',vars\=\{amt\}\}
[\s ]*delay \= 0\.6'''
position = "at"
payload = '''

-- EZSC 1

elseif eval_type == 'chips' then 
    sound = 'chips1'
    amt = amt
    colour = G.C.CHIPS
    text = localize{type='variable',key='a_chips',vars={amt}}
    delay = 0.6
elseif eval_type == 'x_chips' then
    sound = 'chips1'
    amt = amt
    text = "X" .. amt
    colour = G.C.CHIPS
    config.type = 'fade'
    config.scale = 0.7

-- END EZSC 1

'''
overwrite = true
line_prepend = '$indent'

# Patch 2 adds the individual G.play: EzSc receive

[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''
(?<indent>[\s ])*\-\-calculate the joker individual card effects
[\s ]*local eval \= G\.jokers\.cards\[k\]\:calculate_joker\(\{cardarea \= G\.play, full_hand \= G\.play\.cards, scoring_hand \= scoring_hand, scoring_name \= text, poker_hands \= poker_hands, other_card \= scoring_hand\[i\], individual \= true\}\)
[\s ]*if eval then 
[\s ]*table\.insert\(effects, eval\)
[\s ]*end'''
position = "at"
payload = '''

                    -- EZSC 2

                    --calculate the joker individual card effects
                    EzSc_Effects = {}
                    local eval = G.jokers.cards[k]:calculate_joker({cardarea = G.play, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_card = scoring_hand[i], individual = true})
                    if eval then 
                        table.insert(effects, eval)
                    end

                    if EzSc_Effects then
                        table.insert(effects, EzSc_Effects)
                        EzSc_Effects = {}
                    end

                    -- END EZSC 2

'''
overwrite = true
line_prepend = '$indent'

# Patch 3 adds individual G.play: xChips

[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''
(?<indent>[\s ])*card_eval_status_text\(scoring_hand\[i], 'chips', effects\[ii]\.chips, percent\)
[\s ]*end'''
position = "at"
payload = '''

                            -- EZSC 3

                            card_eval_status_text(scoring_hand[i], 'chips', effects[ii].chips, percent)
                            end

                            if effects[ii].x_chips then
                                if effects[ii].card then juice_card(effects[ii].card) end
                                hand_chips = mod_chips(hand_chips * effects[ii].x_chips)
                                update_hand_text({delay = 0}, {chips = hand_chips})
                                card_eval_status_text(scoring_hand[i], 'x_chips', effects[ii].x_chips, percent)
                            end

                            -- END EZSC 3

'''
overwrite = true
line_prepend = '$indent'

# Patch 4 adds individual G.hand: EzSc receive

[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''
(?<indent>[\s ])*for k\=1, \#G\.jokers\.cards do
[\s ]*\-\-calculate the joker individual card effects
[\s ]*local eval \= G\.jokers\.cards\[k]\:calculate_joker\(\{cardarea \= G\.hand, full_hand \= G\.play\.cards, scoring_hand \= scoring_hand, scoring_name \= text, poker_hands \= poker_hands, other_card \= G\.hand\.cards\[i], individual \= true\}\)
[\s ]*if eval then 
[\s ]*mod_percent \= true
[\s ]*table\.insert\(effects, eval\)
[\s ]*end
[\s ]*end'''
position = "at"
payload = '''

                    -- EZSC 4

                    for k=1, #G.jokers.cards do
                        --calculate the joker individual card effects
                        EzSc_Effects = {}
                        local eval = G.jokers.cards[k]:calculate_joker({cardarea = G.hand, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_card = G.hand.cards[i], individual = true})
                        if eval then 
                            mod_percent = true
                            table.insert(effects, eval)
                        end
                        if EzSc_Effects then
                            table.insert(effects,EzSc_Effects)
                            EzSc_Effects = {}
                        end
                    end


                    -- END EZSC 4

'''
overwrite = true
line_prepend = '$indent'

# Patch 5 adds selling_card: EzSc receive + dollars

[[patches]]
[patches.regex]
target = "functions/button_callbacks.lua"
pattern = '''(?<indent>[\t ])*for i \= 1, \#G\.jokers\.cards do
[\s ]*if G\.jokers\.cards\[i] .\= card then 
[\s ]*G\.jokers\.cards\[i]\:calculate_joker\(\{selling_card \= true, card \= card\}\)
[\s ]*end[\s *]*end'''
position = "at"
payload = '''

-- EZSC 5

for i = 1, #G.jokers.cards do
	EzSc_Effects = {}
    if G.jokers.cards[i] ~= card then 
        G.jokers.cards[i]:calculate_joker({selling_card = true, card = card})
    end
	if EzSc_Effects.card then
		mod_percent = true
		G.E_MANAGER:add_event(Event({
			trigger = 'immediate',
			func = (function() EzSc_Effects.card:juice_up(0.7);return true end)
		}))
	end
	if EzSc_Effects.dollars then
		ease_dollars(EzSc_Effects.dollars)
		if EzSc_Effects.target then
			card_eval_status_text(EzSc_Effects.target, 'dollars', EzSc_Effects.dollars, percent)
		elseif EzSc_Effects.card then
			card_eval_status_text(EzSc_Effects.card, 'dollars', EzSc_Effects.dollars, percent)
		end
	end
	EzSc_Effects = {}
end


-- END EZSC 5

'''
overwrite = true
line_prepend = '$indent'

# Patch 6 adds reroll_shop: EzSc receive + dollars

[[patches]]
[patches.regex]
target = "functions/button_callbacks.lua"
pattern = '''(?<indent>[\t ])*for i \= 1, \#G\.jokers\.cards do
[\s ]*G\.jokers\.cards\[i]\:calculate_joker\(\{reroll_shop \= true\}\)
[\s ]*end'''
position = "at"
payload = '''

-- EZSC 6

for i = 1, #G.jokers.cards do
	EzSc_Effects = {}
    if G.jokers.cards[i] ~= card then 
        G.jokers.cards[i]:calculate_joker({reroll_shop = true})
    end
	if EzSc_Effects.card then
		mod_percent = true
		G.E_MANAGER:add_event(Event({
			trigger = 'immediate',
			func = (function() EzSc_Effects.card:juice_up(0.7);return true end)
		}))
	end
	if EzSc_Effects.dollars then
		ease_dollars(EzSc_Effects.dollars)
		if EzSc_Effects.target then
			card_eval_status_text(EzSc_Effects.target, 'dollars', EzSc_Effects.dollars, percent)
		elseif EzSc_Effects.card then
			card_eval_status_text(EzSc_Effects.card, 'dollars', EzSc_Effects.dollars, percent)
		end
	end
	EzSc_Effects = {}
end


-- END EZSC 6

'''
overwrite = true
line_prepend = '$indent'

# Patch 7 adds skip_blind: EzSc receive + dollars

[[patches]]
[patches.regex]
target = "functions/button_callbacks.lua"
pattern = '''(?<indent>[\t ])*for i \= 1, \#G\.jokers\.cards do
[\s ]*G\.jokers\.cards\[i]\:calculate_joker\(\{skip_blind \= true\}\)
[\s ]*end'''
position = "at"
payload = '''

-- EZSC 7

for i = 1, #G.jokers.cards do
	EzSc_Effects = {}
    if G.jokers.cards[i] ~= card then 
        G.jokers.cards[i]:calculate_joker({skip_blind = true})
    end
	if EzSc_Effects.card then
		mod_percent = true
		G.E_MANAGER:add_event(Event({
			trigger = 'immediate',
			func = (function() EzSc_Effects.card:juice_up(0.7);return true end)
		}))
	end
	if EzSc_Effects.dollars then
		ease_dollars(EzSc_Effects.dollars)
		if EzSc_Effects.target then
			card_eval_status_text(EzSc_Effects.target, 'dollars', EzSc_Effects.dollars, percent)
		elseif EzSc_Effects.card then
			card_eval_status_text(EzSc_Effects.card, 'dollars', EzSc_Effects.dollars, percent)
		end
	end
	EzSc_Effects = {}
end


-- END EZSC 7

'''
overwrite = true
line_prepend = '$indent'

# Patch 8 adds skipping_booster: EzSc receive + dollars

[[patches]]
[patches.regex]
target = "functions/button_callbacks.lua"
pattern = '''(?<indent>[\t ])*for i \= 1, \#G\.jokers\.cards do
[\s ]*G\.jokers\.cards\[i]\:calculate_joker\(\{skipping_booster \= true\}\)
[\s ]*end'''
position = "at"
payload = '''

-- EZSC 8

for i = 1, #G.jokers.cards do
	EzSc_Effects = {}
    if G.jokers.cards[i] ~= card then 
        G.jokers.cards[i]:calculate_joker({skipping_booster = true})
    end
	if EzSc_Effects.card then
		mod_percent = true
		G.E_MANAGER:add_event(Event({
			trigger = 'immediate',
			func = (function() EzSc_Effects.card:juice_up(0.7);return true end)
		}))
	end
	if EzSc_Effects.dollars then
		ease_dollars(EzSc_Effects.dollars)
		if EzSc_Effects.target then
			card_eval_status_text(EzSc_Effects.target, 'dollars', EzSc_Effects.dollars, percent)
		elseif EzSc_Effects.card then
			card_eval_status_text(EzSc_Effects.card, 'dollars', EzSc_Effects.dollars, percent)
		end
	end
	EzSc_Effects = {}
end


-- END EZSC 8

'''
overwrite = true
line_prepend = '$indent'

# Patch 9 adds using_consumeable: EzSc receive + dollars

[[patches]]
[patches.regex]
target = "functions/button_callbacks.lua"
pattern = '''(?<indent>[\t ])*for i \= 1, \#G\.jokers\.cards do
[\s ]*G\.jokers\.cards\[i]\:calculate_joker\(\{using_consumeable \= true, consumeable \= card\}\)
[\s ]*end'''
position = "at"
payload = '''

-- EZSC 9

for i = 1, #G.jokers.cards do
	EzSc_Effects = {}
    if G.jokers.cards[i] ~= card then 
        G.jokers.cards[i]:calculate_joker({using_consumeable = true, consumeable = card})
    end
	if EzSc_Effects.card then
		mod_percent = true
		G.E_MANAGER:add_event(Event({
			trigger = 'immediate',
			func = (function() EzSc_Effects.card:juice_up(0.7);return true end)
		}))
	end
	if EzSc_Effects.dollars then
		ease_dollars(EzSc_Effects.dollars)
		if EzSc_Effects.target then
			card_eval_status_text(EzSc_Effects.target, 'dollars', EzSc_Effects.dollars, percent)
		elseif EzSc_Effects.card then
			card_eval_status_text(EzSc_Effects.card, 'dollars', EzSc_Effects.dollars, percent)
		end
	end
	EzSc_Effects = {}
end


-- END EZSC 9

'''
overwrite = true
line_prepend = '$indent'

# Patch 10 adds joker_main: EzSc receive + calc & other_joker: EzSc receive + x_chips/dollars

[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''(?<indent>[\t ])*\-\-calculate the joker effects
\s*.*\n\n\s*\-\-.*
.*\n\s*local.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n'''
position = "at"
payload = '''

-- EZSC 10

--calculate the joker effects
EzSc_Effects = {}
local effects = eval_card(_card, {cardarea = G.jokers, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, joker_main = true})

--Any Joker effects
if effects.jokers then 
    local extras = {mult = false, hand_chips = false}
    if effects.jokers.mult_mod then mult = mod_mult(mult + effects.jokers.mult_mod);extras.mult = true end
    if effects.jokers.chip_mod then hand_chips = mod_chips(hand_chips + effects.jokers.chip_mod);extras.hand_chips = true end
    if effects.jokers.Xmult_mod then mult = mod_mult(mult*effects.jokers.Xmult_mod);extras.mult = true  end
    update_hand_text({delay = 0}, {chips = extras.hand_chips and hand_chips, mult = extras.mult and mult})
    card_eval_status_text(_card, 'jokers', nil, percent, nil, effects.jokers)
    percent = percent+percent_delta
end
if EzSc_Effects then
    local extras = {mult = false, hand_chips = false}
    if EzSc_Effects.chips then
        hand_chips = mod_chips(hand_chips + EzSc_Effects.chips)
        extras.hand_chips = true
    end
    if EzSc_Effects.x_chips then
        hand_chips = mod_chips(hand_chips * EzSc_Effects.x_chips)
        extras.hand_chips = true
    end
    if EzSc_Effects.mult then
        mult = mod_mult(mult + EzSc_Effects.mult)
        extras.mult = true
    end
    if EzSc_Effects.x_mult then
        mult = mod_mult(mult + EzSc_Effects.mult)
        extras.mult = true
    end
    
    if extras.mult or extras.hand_chips then
        update_hand_text({delay = 0}, {chips = extras.hand_chips and hand_chips, mult = extras.mult and mult})
        card_eval_status_text(v, 'jokers', nil, percent, nil, effect)
    end

    if EzSc_Effects.dollars then
        ease_dollars(EzSc_Effects.dollars)
        if EzSc_Effects.target then
            card_eval_status_text(EzSc_Effects.target, 'dollars', EzSc_Effects.dollars, percent)
        elseif EzSc_Effects.card then
            card_eval_status_text(EzSc_Effects.card, 'dollars', EzSc_Effects.dollars, percent)
        end
    end
    EzSc_Effects = {}
    percent = percent + percent_delta
end

--Joker on Joker effects
for _, v in ipairs(G.jokers.cards) do
    EzSc_Effects = {}
    local effect = v:calculate_joker{full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, other_joker = _card}
    if effect then
        local extras = {mult = false, hand_chips = false}
        if effect.mult_mod then mult = mod_mult(mult + effect.mult_mod);extras.mult = true end
        if effect.chip_mod then hand_chips = mod_chips(hand_chips + effect.chip_mod);extras.hand_chips = true end
        if effect.Xmult_mod then mult = mod_mult(mult*effect.Xmult_mod);extras.mult = true  end
        if extras.mult or extras.hand_chips then update_hand_text({delay = 0}, {chips = extras.hand_chips and hand_chips, mult = extras.mult and mult}) end
        if extras.mult or extras.hand_chips then card_eval_status_text(v, 'jokers', nil, percent, nil, effect) end
        percent = percent+percent_delta
    end
    if EzSc_Effects then
        local extras = {mult = false, hand_chips = false}
        if EzSc_Effects.chips then
            hand_chips = mod_chips(hand_chips + EzSc_Effects.chips)
            extras.hand_chips = true
        end
        if EzSc_Effects.x_chips then
            hand_chips = mod_chips(hand_chips * EzSc_Effects.x_chips)
            extras.hand_chips = true
        end
        if EzSc_Effects.mult then
            mult = mod_mult(mult + EzSc_Effects.mult)
            extras.mult = true
        end
        if EzSc_Effects.x_mult then
            mult = mod_mult(mult + EzSc_Effects.mult)
            extras.mult = true
        end
        
        if extras.mult or extras.hand_chips then
            update_hand_text({delay = 0}, {chips = extras.hand_chips and hand_chips, mult = extras.mult and mult})
            card_eval_status_text(v, 'jokers', nil, percent, nil, effect)
        end

        if EzSc_Effects.dollars then
            ease_dollars(EzSc_Effects.dollars)
            if EzSc_Effects.target then
                card_eval_status_text(EzSc_Effects.target, 'dollars', EzSc_Effects.dollars, percent)
            elseif EzSc_Effects.card then
                card_eval_status_text(EzSc_Effects.card, 'dollars', EzSc_Effects.dollars, percent)
            end
        end
        EzSc_Effects = {}
        percent = percent + percent_delta
    end
end


-- END EZSC 10

'''
overwrite = true
line_prepend = '$indent'